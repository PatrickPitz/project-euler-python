"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1+2+3+4+5+6+7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55,... Let us list the factors of the first seven triangle numbers:

1:  1
3:  1,3
6:  1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""


def solution():
    def prime_factors_count(num_n):
        factors = {}
        i = 2
        while i * i <= num_n:
            if num_n % i:
                i += 1
            else:
                num_n //= i
                factors[i] = factors.get(i, 0) + 1
        if num_n > 1:
            factors[num_n] = factors.get(num_n, 0) + 1
        return factors

    def count_divisors(num_n):
        factors = prime_factors_count(num_n)
        num_of_divisors = 1
        for exp in factors.values():
            num_of_divisors *= (exp + 1)
        return num_of_divisors

    n = 1
    triangle = 0

    while True:
        triangle += n
        n += 1
        divisors = count_divisors(triangle)

        if divisors > 500:
            break
    return triangle


solution()
